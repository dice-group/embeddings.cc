<!DOCTYPE html>
<html lang=en>
<head>
<meta charset=utf-8>
<title>API - embeddings.cc</title>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@400;700&family=Roboto+Mono&display=swap" rel="stylesheet">
<link href="/static/prism.min.css" rel="stylesheet" />
<!-- https://fonts.google.com/share?selection.family=Roboto%20Condensed:wght@400;700%7CRoboto%20Mono -->
<!-- https://raw.githubusercontent.com/adibaba/templates/master/claw/colors/claw-colors.svg -->
<!-- https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest -->
<script>
function apiCall(httpMethod, path, parameters, inputId, resultId) {
    var domain = 'http://localhost:1337'
//    var domain = 'https://embeddings.cc'
    var xhr = new XMLHttpRequest();
    xhr.open(httpMethod, domain + path, true);
    xhr.setRequestHeader("Content-type", "application/json");
    xhr.onreadystatechange = function() {

        // Success
        if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {

            // Display input parameters
            if(inputId != null) {
                document.getElementById(inputId).parentElement.parentElement.parentElement.style.display = "table-row";
                if (path == '/api/v1/get_similar_embeddings') {
                    document.getElementById(inputId).innerHTML = JSON.stringify(parameters).replace(/\],\[/g,'\],\n\[').trim();
                } else {
                    document.getElementById(inputId).innerHTML = JSON.stringify(parameters, null, 2);
                }
                Prism.highlightElement(document.getElementById(inputId))
            }
            document.getElementById(resultId).parentElement.parentElement.parentElement.style.display = "table-row";

            // Display result
            if (path == '/api/v1/ping') {
                document.getElementById(resultId).innerHTML = xhr.responseText;
            } else if (path == '/api/v1/get_embeddings' || path == '/api/v1/get_similar_embeddings' || path == '/api/v1/get_similar_entities') {
                document.getElementById(resultId).innerHTML = JSON.stringify(JSON.parse(xhr.responseText)).replace(/\],\[/g,'\],\n\[').trim();
            } else {
                document.getElementById(resultId).innerHTML = JSON.stringify(JSON.parse(xhr.responseText), null, 2);
            }
            Prism.highlightElement(document.getElementById(resultId))

        // Error
        } else if (this.readyState === XMLHttpRequest.DONE) {
            //console.log(xhr.responseText);

            // Display input parameters
            if(inputId != null) {
                document.getElementById(inputId).parentElement.parentElement.parentElement.style.display = "table-row";
                document.getElementById(inputId).innerHTML = JSON.stringify(parameters, null, 2);
                Prism.highlightElement(document.getElementById(inputId))
            }

            // Display result
            document.getElementById(resultId).parentElement.parentElement.parentElement.style.display = "table-row";
            document.getElementById(resultId).innerHTML = 'Error: ' + xhr.responseText;

        // Interim
        } else {
            //console.log("[Not Done] " + xhr.responseText);
        }
    }
    xhr.send(JSON.stringify(parameters));
}
</script>

<style>
html {
    font-family: 'Roboto Condensed', sans-serif;
}
body {
    color: #000;
}
a {
    color: #007eb9;
}
#container {
    max-width: 800px;
    margin: auto;
    padding: 0px;
    padding-bottom: 50px;
}
h1 {
    font-size: 2.8em;
    margin-bottom: 0px;
}
h2 {
    font-size: 1.8em;
    padding-top: 15px;
    margin-bottom: 0px;
}
p {    
    line-height: 1.5;
}
pre {
    margin: 0px;
    font-family: 'Roboto Mono', monospace;
}
code {
    font-family: 'Roboto Mono', monospace;
    font-size: .8em;
}
ul {
    line-height: 1.5;
}
table {
    width: 100%;
    margin: 20px 0px;
    table-layout: fixed;
    border-spacing: 0;
}
tr {
}
tr:nth-child(odd) {
    background: #f8f8f8;
}
td {
    padding: 4px 10px;
    vertical-align: top;
}
td.title {
    width: 20%;
}
tr.test-input {
    display: none;
}
tr.test-result {
    display: none;
}
td.code {
    overflow-x: auto;
    max-width: 80%;
    scrollbar-color: #bbb #f5f5f5;
}
td.code::-webkit-scrollbar {
    width: 15px;
    height: 15px;
}
td.code::-webkit-scrollbar-thumb {
    background: #bbb;
}
td.code::-webkit-scrollbar-track {
    background: #f5f5f5;
}
td:nth-child(1) {  
    font-weight: bold
}
input {
    margin: 0px;
    padding: 8px;
    border: 1px solid #000;
    outline: none;
}
input[type=text] {
    margin-right: 5px;
    background: #e5f2f8;
    font-family: 'Roboto Mono', monospace;
    font-size: .8em;
}
input:hover[type=text] {
    background: #f1f6db;
}
input[type=submit] {
    margin-bottom: 5px;
    background: #a9d4e8;
    font-weight: bold;
    cursor: pointer;
    font-size: .9em;
    padding-bottom: 7px;
}
input:hover[type=submit] {
    background: #d1e28a;
}
textarea {
    width: 100%;
    height: 100px;
    padding: 8px;
    border: 1px solid #ccc;
    background: #e5f2f8;
    font-family: 'Roboto Mono', monospace;
    line-height: 1.5;
    font-size: .8em;
    outline: none;
}
</style>
</head>
<body>
<div id="container">

<h1>Universal Knowledge Graph Embeddings</h1>

<div style="margin-top:20px">
<a href="/">Home</a> &nbsp;&bullet;&nbsp;
<a href="/api">API</a>
</div>



<h2>API methods</h2>

<ul>
 <li><a href="#ping">/api/v1/ping</a></li>
 <li><a href="#get_random_entities">/api/v1/get_random_entities</a></li>
 <li><a href="#get_embeddings">/api/v1/get_embeddings</a></li>
 <li><a href="#get_similar_embeddings">/api/v1/get_similar_embeddings</a></li>
 <li><a href="#get_similar_entities">/api/v1/get_similar_entities</a></li>
</ul>

<h2 id="ping">/api/v1/ping</h2>
<table>
 <tr>
  <td class="title">Description</td>
  <td>Returns HTTP code 200, if embedddings.cc is running stable.</td>
 </tr>
 <tr>
  <td>URL</td>
  <td>https://embeddings.cc/api/v1/ping</td>
 </tr>
 <tr>
  <td>HTTP method</td>
  <td>GET</td>
 </tr>
 <tr>
  <td>Python code example</td>
  <td class="code">
<pre><code class="language-python">import httpx
if httpx.get('https://embeddings.cc/api/v1/ping').status_code == 200:
    print('Status: OK')
</code></pre>
  </td>
 </tr>
 <tr>
  <td>Test</td>
  <td>
   <form onsubmit="apiCall('GET', '/api/v1/ping', {}, null, 'ping_result'); return false">
    <input type="submit" value="Test API method">
   </form>
  </td>
 </tr>
 <tr class="test-result">
  <td>Test result</td>
  <td class="code"><pre><code id="ping_result" class="language-json"></code></pre></td>
 </tr>
</table>



<h2 id="get_random_entities">/api/v1/get_random_entities</h2>

<table>
 <tr>
  <td class="title">Description</td>
  <td>Gets identifiers of example entities.</td>
 </tr>
 <tr>
  <td class="title">URL</td>
  <td>https://embeddings.cc/api/v1/get_random_entities</td>
 </tr>
 <tr>
  <td>HTTP method</td>
  <td>POST</td>
 </tr>
 <tr>
  <td>Parameter</td>
  <td><em>size</em> { default: 10, max: 1000, format: JSON }</td>
 </tr>
 <tr>
  <td>Returns</td>
  <td>List of entity identifiers, format: JSON </td>
 </tr>
 <tr>
  <td>Python code example</td>
  <td class="code">
<pre><code class="language-python">import httpx
response = httpx.post('https://embeddings.cc/api/v1/get_random_entities', json={'size': 10})
if response.status_code == 200:
    print(response.json())
else:
    print('Error:', response.text)
</code></pre>
</td>
 </tr>
 <tr>
  <td>Test</td>
  <td>
   <form onsubmit="apiCall('POST', '/api/v1/get_random_entities', {size:document.getElementById('get_random_entities_size').value}, 'get_random_entities_input', 'get_random_entities_result'); return false">
    <input type="text" id="get_random_entities_size" value="10">
    <input type="submit" value="Test API method">
   </form>
  </td>
 </tr>
 <tr class="test-input">
  <td>Test input</td>
  <td class="code"><pre><code id="get_random_entities_input" class="language-json"></code></pre></td>
 </tr>
 <tr class="test-result">
  <td>Test result</td>
  <td class="code"><pre><code id="get_random_entities_result" class="language-json"></code></pre></td>
 </tr>
</table>



<h2 id="get_embeddings">/api/v1/get_embeddings</h2>

<table>
 <tr>
  <td class="title">Description</td>
  <td>Takes entity identifiers and gets their embeddings.</td>
 </tr>
 <tr>
  <td class="title">URL</td>
  <td>https://embeddings.cc/api/v1/get_embeddings</td>
 </tr>
 <tr>
  <td>HTTP method</td>
  <td>POST</td>
 </tr>
 <tr>
  <td>Parameter</td>
  <td><em>entities</em> { value: list of entity identifiers, max: 1000, format: JSON }</td>
 </tr>
 <tr>
  <td>Returns</td>
  <td>List of 2-element-lists (entity identifier and embeddings), format: JSON</td>
 </tr>
 <tr>
  <td>Python code example</td>
  <td class="code">
<pre><code class="language-python">import httpx
response = httpx.post('https://embeddings.cc/api/v1/get_embeddings', json={'entities': ['http://example.org/1', 'http://example.org/2']})
if response.status_code == 200:
    print(response.json())
else:
    print('Error:', response.text)
</code></pre>
</td>
 </tr>
 <tr>
  <td>Test</td>
  <td>
   <form onsubmit="apiCall('POST', '/api/v1/get_embeddings', {entities:JSON.parse(document.getElementById('get_embeddings_parameters').value)}, 'get_embeddings_input', 'get_embeddings_result'); return false">
    <textarea id="get_embeddings_parameters">
[
  "http://example.org/1", 
  "http://example.org/2"
]
</textarea>
    <input type="submit" value="Test API method">
   </form>
  </td>
 </tr>
 <tr class="test-input">
  <td>Test input</td>
  <td class="code"><pre><code id="get_embeddings_input" class="language-json"></code></pre></td>
 </tr>
 <tr class="test-result">
  <td>Test result</td>
  <td class="code"><pre><code id="get_embeddings_result" class="language-json"></code></pre></td>
 </tr>
</table>



<h2 id="get_similar_embeddings">/api/v1/get_similar_embeddings</h2>

<table>
 <tr>
  <td class="title">Description</td>
  <td>Takes embeddings and gets the top 10 similar embeddings based on cosine similarity.</td>
 </tr>
 <tr>
  <td class="title">URL</td>
  <td>https://embeddings.cc/api/v1/get_similar_embeddings</td>
 </tr>
 <tr>
  <td>HTTP method</td>
  <td>POST</td>
 </tr>
 <tr>
  <td>Parameter</td>
  <td><em>embeddings</em> { value: list of embeddings, max: 1000, format: JSON }</td>
 </tr>
 <tr>
  <td>Returns</td>
  <td>List of 4-element-lists (request index, cosine similarity, entity identifier and embeddings), format: JSON</td>
 </tr>
 <tr>
  <td>Python code example</td>
  <td class="code">
<pre><code class="language-python">import httpx
response = httpx.post('https://embeddings.cc/api/v1/get_similar_embeddings', json={'embeddings': [[-0.1, 0.0, 0.1], [-0.2, 0.0, 0.2]]})
if response.status_code == 200:
    print(response.json())
else:
    print('Error:', response.text)
</code></pre>
</td>
 </tr>
 <tr>
  <td>Test</td>
  <td>
   <form onsubmit="apiCall('POST', '/api/v1/get_similar_embeddings', {embeddings:JSON.parse(document.getElementById('get_similar_embeddings_parameters').value)}, 'get_similar_embeddings_input', 'get_similar_embeddings_result'); return false">
    <textarea id="get_similar_embeddings_parameters">
[
  [], 
  []
]
</textarea>
    <input type="submit" value="Test API method">
   </form>
  </td>
 </tr>
 <tr class="test-input">
  <td>Test input</td>
  <td class="code"><pre><code id="get_similar_embeddings_input" class="language-json"></code></pre></td>
 </tr>
 <tr class="test-result">
  <td>Test result</td>
  <td class="code"><pre><code id="get_similar_embeddings_result" class="language-json"></code></pre></td>
 </tr>
</table>



<h2 id="get_similar_entities">/api/v1/get_similar_entities</h2>

<table>
 <tr>
  <td class="title">Description</td>
  <td>Takes entity identifiers and gets the top 10 similar entity identifiers based on the cosine similarity of their embeddings.</td>
 </tr>
 <tr>
  <td class="title">URL</td>
  <td>https://embeddings.cc/api/v1/get_similar_entities</td>
 </tr>
 <tr>
  <td>HTTP method</td>
  <td>POST</td>
 </tr>
 <tr>
  <td>Parameter</td>
  <td><em>embeddings</em> { value: list of entity identifiers, max: 1000, format: JSON }</td>
 </tr>
 <tr>
  <td>Returns</td>
  <td>List of 3-element-lists (request index, cosine similarity and entity identifier), format: JSON</td>
 </tr>
 <tr>
  <td>Python code example</td>
  <td class="code">
<pre><code class="language-python">import httpx
response = httpx.post('https://embeddings.cc/api/v1/get_similar_entities', json={'entities': ['http://example.org/1', 'http://example.org/2']})
if response.status_code == 200:
    print(response.json())
else:
    print('Error:', response.text)
</code></pre>
</td>
 </tr>
 <tr>
  <td>Test</td>
  <td>
   <form onsubmit="apiCall('POST', '/api/v1/get_similar_entities', {entities:JSON.parse(document.getElementById('get_similar_entities_parameters').value)}, 'get_similar_entities_input', 'get_similar_entities_result'); return false">
    <textarea id="get_similar_entities_parameters">
[
  "http://example.org/1", 
  "http://example.org/2"
]
</textarea>
    <input type="submit" value="Test API method">
   </form>
  </td>
 </tr>
 <tr class="test-input">
  <td>Test input</td>
  <td class="code"><pre><code id="get_similar_entities_input" class="language-json"></code></pre></td>
 </tr>
 <tr class="test-result">
  <td>Test result</td>
  <td class="code"><pre><code id="get_similar_entities_result" class="language-json"></code></pre></td>
 </tr>
</table>



</div>
<script src="/static/prism.js"></script>
<script>
function initialize_parameters(httpMethod, path, parameters) {
    var domain = 'http://localhost:1337'
//    var domain = 'https://embeddings.cc'
    var xhr = new XMLHttpRequest();
    xhr.open(httpMethod, domain + path, true);
    xhr.setRequestHeader("Content-type", "application/json");
    xhr.onreadystatechange = function() {
        if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
            if (path == '/api/v1/get_random_entities') {
                document.getElementById('get_embeddings_parameters').innerHTML = xhr.responseText;
                document.getElementById('get_similar_entities_parameters').innerHTML = xhr.responseText;
                initialize_parameters('POST', '/api/v1/get_embeddings', {entities:JSON.parse(xhr.responseText)})
            } else if (path == '/api/v1/get_embeddings') {
                var embeddings = [];
                JSON.parse(xhr.responseText).forEach(element => embeddings.push(element[1]));
                document.getElementById('get_similar_embeddings_parameters').innerHTML = JSON.stringify(embeddings).replace(/\],\[/g,'\],\n\[').trim();
            }
        } else if (this.readyState === XMLHttpRequest.DONE) {
            console.log(xhr.responseText);
        } 
    }
    xhr.send(JSON.stringify(parameters));
}

window.onload = function () {
    initialize_parameters('POST', '/api/v1/get_random_entities', {"size":"2"})
}
</script>
</body>
</html>
